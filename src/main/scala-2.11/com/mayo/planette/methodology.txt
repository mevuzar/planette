Working with Abstract Types/Traits and type hierarchy branching:
Abstraction Layers:
    Terminology:
     a. Methods return function like types = Operation[A,B]
           Operation[A,B] does not mean anything except an abstraction of A => B
           (not that, something like that)
     b. The purpose of this layer is to define behaviors and business entities/value
        objects tags.
        The above expands to abstract functions as behaviors and abstract types as
        business entities/values.

    Production:
    a. Methods return functions -> type Operation[A,B] = A => Try[B]/Future[B]/Source[B]

    b. The purpose of this layer is to script all actual business flows.
       The abstractions used by this layer are the same abstractions used in production.

    c. This is the layer where data types are denoted in.

Contracts and Injection:
    * Components which engender side effects(database, web calls etc.) should be deferred to
     surface level(closest to execution) as much as possible.

    * Free Monads are tricky in all that regards abstraction because they require cocrete data types to
      work with (you can make them abstract but it adds complexity and you lose the FM's description type safety
      we're so thrilled about).
      In order not to get all messed up with FMs, remember that the free monad descriptive part IS NOT abstract when
      you choose to use free monads and if you need data types abstraction, free monads would probably be
      a poor fit.




Domain:
We have 3 types of domains in a client/server application:
Common
Server
Client

