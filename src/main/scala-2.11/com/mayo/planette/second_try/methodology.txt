Working with Abstract Types/Traits and type hierarchy branching:
Abstraction Layers:
Terminology:
 a. Methods return function like types = Operation[A,B]
       Operation[A,B] does not mean anything except an abstraction of A => B
       (not that, something like that)
 b. The purpose of this layer is to define behaviors and business entities/value
    objects tags.
    The above expands to abstract functions as behaviors and abstract types as
    business entities/values.

Semantic:
a. Methods return functions -> type Operation[A,B] = A => Try[B]/Future[B]/Source[B]

b. The purpose of this layer is to script all actual business flows.
   The abstractions used by this layer are the same abstractions used in production.


Domain:
We have 3 types of domains in a client/server application:
Common
Server
Client
